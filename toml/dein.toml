# color

[[plugins]]
repo = 'cocopon/iceberg.vim'
hook_add = '''
  if has("gui_running") " macvim
    colorscheme iceberg
  endif
'''

[[plugins]]
repo = 'w0ng/vim-hybrid'
hook_add = '''
  if has("nvim") " neovim
    colorscheme hybrid
  endif
'''

# denite

# deniteが動く条件
# - echo has("python3") が 1 であること
#   - 多分vimのビルド時に決まる
#   - brewでインストールしたら大丈夫そう? アプリをそのままもってくるとだめそう
#     - brew --cask でインストールすべし (better touch toolで使えるようにするため)
# - pyx print(sys.version) で出る python の pip3 に pynvim が入っていること
#   - 無ければpip install pynvim をする
# - neovim以外の場合は 'roxma/nvim-yarp' と 'roxma/vim-hug-neovim-rpc' が必要

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
  let g:python3_host_prog = '/usr/local/bin/python3.9'

  autocmd FileType denite call s:denite_my_settings()
  function! s:denite_my_settings() abort
    nnoremap <silent><buffer><expr> <CR>    denite#do_map('do_action')
    nnoremap <silent><buffer><expr> t       denite#do_map('do_action', 'tabopen')
    nnoremap <silent><buffer><expr> s       denite#do_map('do_action', 'split')
    nnoremap <silent><buffer><expr> v       denite#do_map('do_action', 'vsplit')
    nnoremap <silent><buffer><expr> d       denite#do_map('do_action', 'delete')
    nnoremap <silent><buffer><expr> i       denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr> q       denite#do_map('quit')
    nnoremap <silent><buffer><expr> <Space> denite#do_map('toggle_select').'j'
  endfunction
  nmap <F2> <esc>:Denite buffer<CR>
  nmap <F3> <esc>:Denite mark<CR>
  nmap <F4> <esc>:Denite outline<CR>
  nmap <F5> <esc>:Denite jump<CR>
'''

# neovim以外の場合は 'roxma/nvim-yarp' と 'roxma/vim-hug-neovim-rpc' が必要
[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = '''
  let g:deoplete#enable_at_startup = 1
'''

[[plugins]]
repo = 'roxma/nvim-yarp'

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'

# ファイル系

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
  let NERDTreeShowHidden=1
  let NERDTreeWinSize=25
  let g:NERDTreeMapMenu='m'
  nnoremap <F1> :NERDTreeToggle<CR>
'''

[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'

[[plugins]] # file_name:123 のように行数指定でファイルを開ける
repo = 'bogado/file-line'

# 補完系

[[plugins]] # 閉じ括弧補間
repo = 'cohama/lexima.vim'

# 操作系

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]] # 選択箇所をyankで置き換え
repo = 'kana/vim-operator-replace'
hook_add = '''
  " replace operater
  nmap R <Plug>(operator-replace)
'''

[[plugins]] # kana/vim-operator-replaceが依存している
repo = 'kana/vim-operator-user'

[[plugins]] # CamelCase <=> snake_case
repo = 'tyru/operator-camelize.vim'
hook_add = '''
  nmap <Space>s <Plug>(operator-camelize-toggle)
  vmap <Space>s <Plug>(operator-camelize-toggle)
'''

[[plugins]]
repo = 'scrooloose/nerdcommenter'
hook_add = '''
  " コメントアウト時にスペース1個
  let g:NERDSpaceDelims=1
  let g:NERDDefaultAlign = 'left'
  " Ctrl + スラッシュでエスケープ
  vmap <C-c> <Leader>c<space>
'''

# 表示系

[[plugins]]
repo = 'itchyny/lightline.vim'
# https://github.com/itchyny/lightline.vim/issues/293#issuecomment-373710096
hook_add = '''
  let g:lightline = {
        \ 'component_function': {
        \   'filename': 'LightlineFilename',
        \ }
        \ }
  function! LightlineFilename()
    let root = fnamemodify(get(b:, 'git_dir'), ':h')
    let path = expand('%:p')
    if path[:len(root)-1] ==# root
      return path[len(root)+1:]
    endif
    return expand('%')
  endfunction
'''

[[plugins]] # 余分な空白を赤く
repo = 'bronson/vim-trailing-whitespace'
hook_add = '''
  " unite vim でも機能するのを止める
  let g:extra_whitespace_ignored_filetypes = ['unite']
'''

[[plugins]]
repo = 'simeji/winresizer'
hook_add = '''
  " ctrl+eでのリサイズのサイズ
  let g:winresizer_vert_resize = 5
'''

[[plugins]] # カーソル下の単語を移動するたびにハイライトする
repo = 'osyo-manga/vim-brightest'
hook_add = '''
  let g:brightest#highlight = { "group" : "BrightestUnderline" }
  let g:brightest#pattern = '\k\+'
'''

# 検索・置換系

[[plugins]] # rubyやperl風正規表現(インクリメンタルサーチはできない)
repo = 'othree/eregex.vim'
# "/" will use :M/ to search. ",/" will use the original "/".
hook_add = '''
  nnoremap r/ :M/
  nnoremap r? :M?
  nnoremap / /\v
  nnoremap ? ?\v
'''

[[plugins]] # 検索結果数カウント
repo = 'henrik/vim-indexed-search'
hook_add = '''
  let g:indexed_search_dont_move = 1 " 検索時に1個下に動かないようになる
  let g:indexed_search_numbered_only = 1 " 検索カウントを簡素な表示に
  let g:indexed_search_shortmess = 1 " 検索カウントを簡素な表示に
  function! s:VSetSearch()
    " 参考 https://github.com/nelstrom/vim-visual-star-search/blob/master/plugin/visual-star-search.vim
    let temp = @s
    norm! gv"sy
    let @/ = '\V' . substitute(escape(@s, '/' . '\'), '\n', '\\n', 'g')
    let @s = temp
  endfunction
  xnoremap * :<C-u>call <SID>VSetSearch()<CR>/<C-R>=@/<CR><CR>N
'''

# mark系

[[plugins]]
repo = 'kshenoy/vim-signature'
hook_add = '''
  let g:SignatureMap = { 'Leader' : "m", 'PlaceNextMark' : "", 'ToggleMarkAtLine' : "<Space>m", 'PurgeMarksAtLine' : "", 'DeleteMark' : "", 'PurgeMarks' : "", 'PurgeMarkers' : "", 'GotoNextLineAlpha' : "", 'GotoPrevLineAlpha' : "", 'GotoNextSpotAlpha' : "", 'GotoPrevSpotAlpha' : "", 'GotoNextLineByPos' : "", 'GotoPrevLineByPos' : "", 'GotoNextSpotByPos' : "", 'GotoPrevSpotByPos' : "", 'GotoNextMarker' : "", 'GotoPrevMarker' : "", 'GotoNextMarkerAny' : "", 'GotoPrevMarkerAny' : "", 'ListBufferMarks' : "", 'ListBufferMarkers' : "" }
  let g:SignatureIncludeMarks = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
'''

[[plugins]] # コードに色付け(markとは別物) https://secret-garden.hatenablog.com/
repo = 't9md/vim-quickhl'
hook_add = '''
  nmap <Space>h <Plug>(quickhl-manual-this)
  xmap <Space>h <Plug>(quickhl-manual-this)
  nmap <Space>H <Plug>(quickhl-manual-reset)
'''

# Git系

[[plugins]] # gitコマンドをvimから使う
repo = 'tpope/vim-fugitive'

[[plugins]] # gitのdiffを左端に表示
repo = 'airblade/vim-gitgutter'
hook_add = '''
  let g:gitgutter_git_executable = '/usr/local/bin/git'
'''

[[plugins]] # gitのviewer. :Agit, :AgitFile
repo = 'cohama/agit.vim'

# 言語系

## LSP
[[plugins]]
repo ='prabirshrestha/vim-lsp'
[[plugins]]
repo = 'mattn/vim-lsp-settings'
[[plugins]]
repo = 'lighttiger2505/deoplete-vim-lsp'

## Ruby

[[plugins]]
repo = 'ngmy/vim-rubocop'
hook_add = '''
  let g:vimrubocop_config = '~/.rubocop.yml'
'''

[[plugins]]
repo = 'dense-analysis/ale'
# :ALEFix で自動整形
hook_add = '''
  let g:ale_enabled = 0
  let g:ale_fixers = { 'ruby': ['rubocop'] }
'''

[[plugins]]
repo = 'tpope/vim-endwise'

[[plugins]]
repo = 'tpope/vim-rails'

## javascript
[[plugins]]
repo = 'maxmellon/vim-jsx-pretty'
hook_add = '''
  let g:vim_jsx_pretty_colorful_config = 1
  let g:vim_jsx_pretty_highlight_close_tag = 1
'''

## Crystal

[[plugins]]
repo = 'rhysd/vim-crystal'

## markdown

[[plugins]]
repo = 'plasticboy/vim-markdown'
hook_add = '''
  " markdwonの折りたたみ無効化
  set nofoldenable
  let g:vim_markdown_folding_disabled = 1
  " markdown書くようの設定
  autocmd FileType markdown inoremap <Tab> <Esc>>>A
  autocmd FileType markdown inoremap <S-Tab> <Esc><<A
  let g:vim_markdown_conceal = 0
'''

## LaTeX

[[plugins]]
repo = 'lervag/vimtex'
hook_add = '''
  " pdflatexをコンパイル
  let g:latex_latexmk_options = '-pdf'
'''

## HTML

[[plugins]] # htmlショートカットで書くやつ
repo = 'mattn/emmet-vim'
# (タグ Ctrl y ,) で<タグ></タグ>になる
# html:5 でhtml5のテンプレート
# ul>li*3 でリスト3つ
# テキストはdiv{}のように
# visualで囲った後に使うと、タグでそれを囲める
# 詳しくは: https://raw.githubusercontent.com/mattn/emmet-vim/master/TUTORIAL

## TOML

[[plugins]]
repo = 'cespare/vim-toml'

## CSV
[[plugins]]
repo = 'mechatroner/rainbow_csv'

# その他

