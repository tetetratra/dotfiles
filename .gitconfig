[alias]
  a = "commit -a --amend"
  # 参考: https://stackoverflow.com/a/5188364
  b = "for-each-ref --sort=committerdate refs/heads/ --format='%(HEAD) %(color:red)%(objectname:short)%(color:reset) %(color:yellow)%(refname:short)%(color:reset) %(contents:subject) (%(color:green)%(committerdate:relative)%(color:reset))'"
  c = "commit -am 'update'"
  s = status
  ss = status --short
  sss = "!f() { git status --short | awk '{ print $2 }' | tr '\n' ' '; }; f"
  l = log --pretty=fuller --graph --date=short --decorate=full --stat
  lp = log --pretty=fuller --graph --date=short --decorate=full --stat -p
  pl = pull
  ps = push
  psf = push --force-with-lease
  co = checkout
  cp = cherry-pick
  prev = reset --mixed HEAD~1
  diffall = diff --no-prefix --unified=1000
  default-branch = "! git remote show origin | grep 'HEAD branch' | awk '{print $NF}'" # https://qiita.com/ymm1x/items/b22bddc9fbc192ae1a70
  d = "! git diff $(git default-branch)..HEAD"
  oneline = log --name-only --oneline
  force-pull = "!git fetch && git reset --hard origin/$(git branch --show-current)" # https://qiita.com/Yinaura/items/30992f25b87f76af3ba2
  # developからHEADまでに更新したファイル一覧
  fs = "!f () { git log --name-only --oneline develop..HEAD | rr chomp 'reject{_1[/\\w{9} /]}.uniq.sort.join(%Q(\\n))'; }; f"
  # developからHEADまでをrebase (developへsquashマージしているプロジェクト用)
  ri = "! git rebase -i `git log develop~1..HEAD --pretty=%H | tail -n 1`"
  # developからHEADまでをrebase (developへ通常のマージしているプロジェクト用)
  rei = "! git rebase -i HEAD~$(git commit-count-from develop)"
  # --- alias用util関数 ---
  commit-count-from = "!f () { git log --oneline $(git first-parent-sha $1)..HEAD | wc -l | tr -d ' '; }; f"
  first-parent-sha = "!f () { git log --first-parent $1 --pretty='%H' -n 1;}; f"

[core]
  editor = nvim
  quotepath = false  # git 日本語ファイル名をエスケープせずに表示
  excludesfile = ~/.gitignore
[status] # git status 追跡されていないファイルはすべて表示
  showUntrackedFiles = all

[init]
  defaultBranch = main
[pull]
  rebase = true
[push]
  default = current

# master,main,developにいるときのgit pullではoriginをpullするようにする
[branch "master"]
  remote = origin
  merge = refs/heads/master
[branch "main"]
  remote = origin
  merge = refs/heads/main
[branch "develop"]
  remote = origin
  merge = refs/heads/develop

[include]
  path = .gitconfig_local

