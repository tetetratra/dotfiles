# utils
alias l='ls -AlFGhv'
alias ls='ls -AFGv'
alias g='git'
alias tree='tree -a'
alias less='less -R'
alias p='pbpaste'
alias c='pbcopy'
alias o='open'
alias touch='(){ mkdir -p $(dirname $1) && touch $1 }'
alias rm='trash'
alias tree='tree --charset unicode'
alias history='history -E 1'
# neovim
alias nvim='nvim -p'
alias n='nvim $(git ls-ss)'
# chrome
alias chrome='/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome'
alias chrome-full='(){ chrome --app="$1" }' # 関数として呼び出さないと引数が展開されないため
# rails
alias be='bundle exec'
alias lesstestlog='echo "--------------------" >> log/test.log; less +F log/test.log'
alias lessdeveloplog='echo "--------------------" >> log/development.log; less +F log/development.log'
# docker
alias d='docker'
alias dc='docker-compose'
alias dcr=' (){ docker-compose run --rm $1 bash -c "$2" }'
alias dcrb='(){ docker-compose run --rm $1 bash -c "bash --rcfile utils/.bashrc_local" }'
alias dce=' (){ docker-compose exec     $1 bash -c "$2" }' # 使用例: `dc up -d` 後に `dce app 'bin/rails s'`
alias dceb='(){ docker-compose exec     $1 bash -c "bash --rcfile utils/.bashrc_local" }'
# tmux
alias blue='tmux set-option -p -t : window-active-style bg=colour17' # 現在(-t :)のpane(-p)の背景色を変更
alias red='tmux set-option -p -t : window-active-style bg=colour52'
alias yellow='tmux set-option -p -t : window-active-style bg=colour58'
alias x='
  function layout_tmux_func() {
    tmux split-window -v

    tmux select-pane -U
    tmux split-window -h

    local width=$(tmux display -p "#{window_width}")
    local height=$(tmux display -p "#{window_height}")
    local ww=$((width * 65 / 100))
    local hh=$((height * 70 / 100))

    tmux resize-pane -x "$ww" -y "$hh"
  }
  layout_tmux_func
  clear
'
alias tmux-colors='for i in {0..255}; do printf "\033[48;5;%sm %3s \033[0m" $i $i; (( i % 16 == 15 )) && echo; done'

wt() {
  echo '[準備]'
  echo '現在のworktree一覧'
  git worktree list
  echo ''

  # ディレクトリ削除済みのworktreeを消しておく
  echo 'ディレクトリ削除済みのworktreeを消します'
  git worktree prune
  echo ''

  echo '[実行]'
  if [ -z "$1" ]; then
    echo "引数にブランチ名を渡してください: wt <branch-name>"
    return 1
  else
    echo "worktreeを追加します"
  fi

  branch="$1"
  dir="wt/$branch"

  git worktree add "$dir" -b "$branch" || return 1
  cd "$dir"

  # 参照元は親リポジトリのルート
  root="$(git rev-parse --show-toplevel)"

  # カンマ区切りの環境変数 WT_LINK_TARGETS を展開し、シンボリックリンクを張る
  IFS=',' read -r -A targets <<< "${WT_LINK_TARGETS}"
  for target in "${targets[@]}"; do
    if [ -n "$target" ] && [ -e "$root/$target" ] && [ ! -e "$target" ]; then
      ln -s "$root/$target" "$target"
      echo "Linked $target -> $root/$target"
    fi
  done
}
