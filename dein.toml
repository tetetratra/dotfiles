# TODO
# - [ ] dein.tomlをluaファイル化(インデントも揃える)
# - [ ] ctrl h, l でwindowの移動をする
# - [ ] ctrl x でwindowを閉じる
# - [ ] lualineで、現在のファイル名をわかりやすく表示する
# - [ ] nvimtreeで、現在フォーカスがあたっているファイルをハイライトする
# - [ ] nvimtreeで、gitのstagedファイルかどうかを表示する
# - [ ] ctrl ] で最終的にtagsも使う(最初のマッチにjump)
# - [ ] ctrl - でhorizonal split
# - [ ] ctrl | でvertical split
# - [ ] tabを使う
#   - bufferlineでtab modeを使うようにして、Shift h, l でtabを移動するkeymapを設定する
#   - 各tab内にどんなwindowがあるかをサイドバーに表示できるようにする
# - [ ] lexima.vimで、checkboxの[ のときはスペースが1個だけ入るようにする
# - [ ] copilot chatのacceptのkeymapを変更する
# - [ ] copilot chatやnvim-treeのtoggleをf1,f2,...に割り当てる

[[plugins]]
repo = 'rmagatti/auto-session'
lua_add = '''
  require("auto-session").setup()
 
  vim.api.nvim_set_keymap('n', '<Space>w', ':write<CR>:SessionSave<CR>', { silent = true })
'''

[[plugins]]
repo = 'folke/which-key.nvim'
lua_add = '''
  require("which-key").setup({})
'''

[[plugins]]
repo = 'karb94/neoscroll.nvim'
lua_add = '''
  neoscroll = require('neoscroll')
  local keymap = {}
  vim.keymap.set({ 'n', 'v', 'x' }, "<C-u>", function() neoscroll.ctrl_u({ duration = 100 }) end)
  vim.keymap.set({ 'n', 'v', 'x' }, "<C-d>", function() neoscroll.ctrl_d({ duration = 100 }) end)
  neoscroll.setup({})
'''

[[plugins]]
repo = 'nvim-lua/plenary.nvim'

# Color
[[plugins]]
repo = 'cocopon/iceberg.vim'
# highlightの設定は https://github.com/cocopon/iceberg.vim/issues/101 がcloseするまで
lua_add = '''
  vim.cmd('colorscheme iceberg')
  vim.cmd('highlight FloatBorder guibg=#242940 guifg=#242940 ctermbg=none')
'''

[[plugins]]
# 検索したものは <C-t> で新規タブで開ける
repo = 'nvim-telescope/telescope.nvim'
depends = ['nvim-lua/plenary.nvim', 'natecraddock/telescope-zf-native.nvim']
lua_add = '''
  -- live_grep は ripgrep に依存している
  vim.api.nvim_set_keymap('n', '<Space>f', ':lua require("telescope.builtin").find_files({ initial_mode = "normal" })<cr>', { noremap = true })
  vim.api.nvim_set_keymap('n', '<Space>?', ':lua require("telescope.builtin").help_tags({ initial_mode = "normal" })<cr>', { noremap = true }) -- helpを絞り込んで探せる(helpの連想で?のキー)
  -- vim.api.nvim_set_keymap('n', '<Space>b', ':lua require("telescope.builtin").buffers({ initial_mode = "normal" })<cr>', { noremap = true })
  vim.api.nvim_set_keymap('n', '<Space>r', ':lua require("telescope.builtin").resume({ initial_mode = "normal" })<cr>', { noremap = true })

  -- 折りたたみを無効化する 参考: https://github.com/nvim-telescope/telescope.nvim/issues/991#issuecomment-1429539473
  vim.api.nvim_create_autocmd("FileType", { pattern = "TelescopeResults", command = [[setlocal nofoldenable]] })

  -- 参考: https://dev.classmethod.jp/articles/nvim_telescope
  require('telescope').setup({
    defaults = {
      mappings = {
        n = {
          ["<esc>"] = require('telescope.actions').close,
          ["<C-d>"] = require('telescope.actions').close,
          ["q"] = require('telescope.actions').close,
        },
        i = {
          ["<esc>"] = require('telescope.actions').close,
          ["<Down>"] = require('telescope.actions').cycle_history_next,
          ["<Up>"] = require('telescope.actions').cycle_history_prev,
        }
      },
      preview = {
        treesitter = { enable = false, } -- 右側に表示されるプレビューまわりでtreesitterのエラーが起きるのでtelescope内では無効化する
      },
    },
    ["zf-native"] = {
        -- options for sorting file-like items
        file = {
            -- override default telescope file sorter
            enable = true,
            -- highlight matching text in results
            highlight_results = true,
            -- enable zf filename match priority
            match_filename = false,
        },

        -- options for sorting all other items
        generic = {
            -- override default telescope generic item sorter
            enable = true,
            -- highlight matching text in results
            highlight_results = true,
            -- disable zf filename match priority
            match_filename = false,
        },
    }
  })
'''

[[plugins]]
repo = 'nvim-telescope/telescope-live-grep-args.nvim'
depends = ['nvim-telescope/telescope.nvim']
# "" や '' で囲むと、その次の語句でdirを指定できる
lua_add = '''
  require('telescope').load_extension('live_grep_args')
  vim.api.nvim_set_keymap('n', '<Space>g', ':lua require("telescope").extensions.live_grep_args.live_grep_args({ initial_mode = "normal" })<cr>', { noremap = true }) -- grepのg
'''

# fuzzy finder
# telescopeで使っている
[[plugins]]
repo = 'natecraddock/telescope-zf-native.nvim'
lua_add = '''
  -- telescopeの方にも設定あり
  require('telescope').load_extension('zf-native')
'''

# ファイラー
# B でバッファにあるのみ表示
[[plugins]]
repo = 'kyazdani42/nvim-tree.lua'
lua_add = '''
  require("nvim-tree").setup({
    view = {
      width = 50,
    },
  })

  vim.api.nvim_set_keymap('n', '<Space>`', ':NvimTreeFindFile<CR>', { noremap = true, silent = true })
'''

# 入れてなかったら `brew install --cask font-noto-nerd-font` して、iterm2でそれを設定する
[[plugins]]
repo = 'ryanoasis/vim-devicons'

[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'

[[plugins]] # file_name:123 のように行数指定でファイルを開ける
repo = 'bogado/file-line'

# 補完

## CoC
# インストール後
# - `:CocConfig`を打つ (だめだったら`:call coc#util#install()`もしてみる)
# - lspを入れる
#   - `:CocInstall coc-solargraph`
#   - `:CocInstall coc-tsserver @yaegassy/coc-volar coc-eslint coc-prettier`
[[plugins]]
repo = 'neoclide/coc.nvim'
source = 'release'
build = 'coc#util#install()' # 参考: https://scrapbox.io/appbirdNotebook-public/coc.nvim_%E3%82%92_%E3%83%80%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%89_%E3%81%97%E3%82%88%E3%81%86%E3%81%A8%E3%81%97%E3%81%9F%E3%82%89_coc.nvim_build%2Findex.js_not_found,_please_install_dependencies_and_compile_coc.nvim_by:_npm_ci%E3%81%A8%E5%87%BA%E3%81%9F
lua_add = '''
    -- 公式のREADMEを参考に設定

    local keyset = vim.keymap.set
    -- Autocomplete
    function _G.check_back_space()
        local col = vim.fn.col('.') - 1
        return col == 0 or vim.fn.getline('.'):sub(col, col):match('%s') ~= nil
    end

    -- Use Tab for trigger completion with characters ahead and navigate
    -- NOTE: There's always a completion item selected by default, you may want to enable
    -- no select by setting `"suggest.noselect": true` in your configuration file
    -- NOTE: Use command ':verbose imap <tab>' to make sure Tab is not mapped by
    -- other plugins before putting this into your config
    local opts = {silent = true, noremap = true, expr = true, replace_keycodes = false}
    keyset("i", "<TAB>",   [[coc#pum#visible() ? coc#pum#next(1) : (v:lua.check_back_space() ? "<TAB>" : coc#refresh())]], opts)
    keyset("i", "<Down>",  [[coc#pum#visible() ? coc#pum#next(1) : "<Down>"]], opts)
    keyset("i", "<S-TAB>", [[coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"]], opts)
    keyset("i", "<Up>",    [[coc#pum#visible() ? coc#pum#prev(1) : "<Up>"]], opts)
    
    -- Make <CR> to accept selected completion item or notify coc.nvim to format
    -- <C-g>u breaks current undo, please make your own choice
    keyset("i", "<cr>", [[coc#pum#visible() ? coc#pum#confirm() : "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"]], opts)

    -- GoTo code navigation
    keyset("n", "<Space>[", "<Plug>(coc-references)", {silent = true})

    function jump_gf_lsp_tag()
        -- coc-definition を試す
        local jump_success = false
        local ok, _ = pcall(function() -- エラーハンドリング付きで実行
          jump_success = vim.fn.CocAction('jumpDefinition')
        end)
        if ok and jump_success then
          print("[lsp]")
          return
        end

        -- gf (Vim-Rails の拡張込み) を試す
        local ok, _ = pcall(function() -- エラーハンドリング付きで実行
          vim.cmd('normal gf')
        end)
        if ok then
          print("[vim-rails]")
          return
        end

        -- tagジャンプ を試す
        ok, _ = pcall(function()
            vim.cmd('tag ' .. vim.fn.expand('<cword>'))
        end)
        if ok then
          print("[tag]")
          return
        end

        print("No LSP definition or file or tag found.")
    end
    vim.api.nvim_set_keymap("n", "<C-]>", ":lua jump_gf_lsp_tag()<CR>", { noremap = true, silent = true })

    vim.api.nvim_set_keymap(
      'n',
      '<C-k>',
      '<cmd>lua show_documentation()<CR>',
      { noremap = true, silent = true }
    )
    function show_documentation()
      vim.fn.CocAction('doHover')
    end
'''

# 操作
[[plugins]]
repo = 'numToStr/Comment.nvim'
lua_add = '''
  require('Comment').setup()

  vim.api.nvim_set_keymap('v', '<C-c>', '<Plug>(comment_toggle_linewise_visual)', { noremap = true, silent = true })
'''

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]] # 縦揃え用。`:Align ,`のように使う
repo = 'vim-scripts/Align'

[[plugins]] # 選択箇所をyankで置き換え
repo = 'kana/vim-operator-replace'
lua_add = '''
  vim.api.nvim_set_keymap('n', 'R', '<Plug>(operator-replace)', {})
'''

[[plugins]] # kana/vim-operator-replaceが依存している
repo = 'kana/vim-operator-user'

[[plugins]] # CamelCase <=> snake_case
repo = 'tyru/operator-camelize.vim'
lua_add = '''
  vim.api.nvim_set_keymap('v', '<Space>s', '<Plug>(operator-camelize-toggle)', {})
'''

[[plugins]]
repo = 'j-morano/buffer_manager.nvim'
depends = ['nvim-lua/plenary.nvim']
lua_add = '''
  vim.api.nvim_set_keymap('n', '<Space>b', ':lua require("buffer_manager.ui").toggle_quick_menu()<CR>', { noremap = true })

  vim.api.nvim_set_keymap('n', '<BS>', '<C-w>c', { silent = true })
'''

# [[plugins]]
# repo = 'akinsho/bufferline.nvim'
# depends = ['nvim-tree/nvim-web-devicons']
# lua_add = '''
#   vim.opt.termguicolors = true
#   require("bufferline").setup {
#     options = {
#       tab_size = 5,
#       show_close_icon = false,
#       show_buffer_close_icons = false,
#       show_duplicate_prefix = false,
#       get_element_icon = function(element)
#         -- nilを返した場合デフォルトのアイコンが使われる
#         return element.filetype == "" and "" or nil
#       end,
#       offsets = {
#         {
#           filetype = "NvimTree",
#           text = "NvimTree",
#           highlight = "Directory",
#           separator = true
#         }
#       }
#     }
#   }
# 
#   vim.api.nvim_set_keymap('n', '<C-l>', ':BufferLineCycleNext<CR>', { noremap = true, silent = true })
#   vim.api.nvim_set_keymap('n', '<C-h>', ':BufferLineCyclePrev<CR>', { noremap = true, silent = true })
#   vim.api.nvim_set_keymap('n', '>', ':BufferLineMoveNext<CR>', { noremap = true, silent = true })
#   vim.api.nvim_set_keymap('n', '<lt>', ':BufferLineMovePrev<CR>', { noremap = true, silent = true })
#   vim.api.nvim_set_keymap('n', '<C-p>', ':BufferLineTogglePin<CR>', { noremap = true, silent = true })
# 
#   vim.api.nvim_set_keymap('n', '<Space>q', ':bdelete!<CR>', { silent = true })
# '''

[[plugins]]
repo = 'nvim-tree/nvim-web-devicons'

[[plugins]]
repo = 'nvim-lualine/lualine.nvim'
depends = ['nvim-tree/nvim-web-devicons']
lua_add = '''
  require('lualine').setup({
    options = { theme = 'iceberg_dark' },
    sections = {
      lualine_c = { { 'filename', file_status = true, path = 3 } },
    }
  })
'''


[[plugins]]
repo = 'simeji/winresizer'
hook_add = '''
  let g:winresizer_vert_resize = 5
  let g:winresizer_start_key = '<F1>'
'''

[[plugins]] # カーソル下の単語を移動するたびにハイライトする
repo = 'osyo-manga/vim-brightest'
hook_add = '''
  let g:brightest#highlight = { "group" : "BrightestUnderline" }
  let g:brightest#pattern = '\k\+'
'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
# これらを実行する
# :TSInstall ruby toml javascript typescript html css json yaml lua rust c cpp swift go haskell
# 確認
# :TSInstallInfo
hook_post_update = '''
  TSUpdate
'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter-context'
depends = ['nvim-treesitter']

[[plugins]] # 引数のハイライト
repo = 'm-demare/hlargs.nvim'
depends = ['nvim-treesitter']
lua_add = '''
  require('hlargs').setup {
    color = '#C0D0FF'
  }
'''

[[plugins]]
repo = 'lukas-reineke/indent-blankline.nvim'
depends = ['nvim-treesitter']
# https://github.com/lukas-reineke/indent-blankline.nvim?tab=readme-ov-file#background-color-indentation-guides
lua_add = '''
  local highlight = {
    "CursorColumn",
    "Whitespace",
  }
  require("ibl").setup {
    indent = { highlight = highlight, char = "" },
    whitespace = {
      highlight = highlight,
      remove_blankline_trail = false,
    },
    scope = { enabled = false },
  }
'''

[[plugins]] # 閉じ括弧補間
repo = 'cohama/lexima.vim'

[[plugins]]
repo = 'ntpeters/vim-better-whitespace'
hook_add = '''
  let g:better_whitespace_guicolor = 'DarkRed'
'''

# 検索・置換
[[plugins]]
repo = 'othree/eregex.vim'
# /  : 普通の検索 (インクリメンタルサーチ可)
# ? : Rubyの正規表現で検索
# %s : 通常の置換
# %S : Rubyの正規表現で置換
# [Rubyの正規表現のみで使えるもの]
# \d
# a|b
# a*
# a+
# (a)
# などなど
hook_add = '''
  let g:eregex_default_enable = 0
  nnoremap ? :M/
'''

[[plugins]] # 検索結果数カウント
repo = 'henrik/vim-indexed-search'
hook_add = '''
  let g:indexed_search_dont_move = 1 " 検索時に1個下に動かないようになる
  let g:indexed_search_numbered_only = 1 " 検索カウントを簡素な表示に
  let g:indexed_search_shortmess = 1 " 検索カウントを簡素な表示に
'''

# mark
[[plugins]]
repo = 'kshenoy/vim-signature'
lua_add = '''
  vim.g.SignatureMap = { ToggleMarkAtLine = "<Space>m", }
  vim.g.SignatureIncludeMarks = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  vim.api.nvim_set_keymap('n', '<Space>M', ':delmarks A-Z<CR>', { silent = true })
'''

[[plugins]] # コードに色付け(markとは別物) https://secret-garden.hatenablog.com/
repo = 't9md/vim-quickhl'
lua_add = '''
  local pattern = ('binding.pry,binding.irb,NOTE:,MEMO:,<<<<<<<,>>>>>>>,======='):gsub(",", "\\|")
  vim.api.nvim_set_keymap('n', '<Space>h', '<Plug>(quickhl-manual-this-whole-word)', { silent = true })
  vim.api.nvim_set_keymap('x', '<Space>h', '<Plug>(quickhl-manual-this)', { silent = true })
  vim.api.nvim_set_keymap('n', '<Space>H', '<Plug>(quickhl-manual-reset)', {silent = true })
  vim.g.quickhl_manual_enable_at_startup = 1
  vim.g.quickhl_manual_keywords = { { pattern = pattern, regexp = 1 }, }
'''

[[plugins]]
repo = 'kristijanhusak/line-notes.nvim'
lua_add = '''
  local git_root = vim.fn.system("git rev-parse --show-toplevel"):gsub("\n", "")
  require('line-notes').setup({
    path = git_root .. '/line-notes.json',
    border_style = 'none'
  })

  -- カーソル移動時にプレビューを表示
  vim.api.nvim_create_autocmd("CursorMoved", {
    callback = function()
      require('line-notes').preview()
    end,
  })

  vim.api.nvim_set_keymap('n', '<Space>n', ':lua require("line-notes").add()<CR>', { noremap = true })
  vim.api.nvim_set_keymap('n', '<Space>N', ':lua require("line-notes").delete()<CR>', { noremap = true })
'''

# git
[[plugins]] # gitコマンドをvimから使う
lazy = 1
on_cmd = ['Git', 'Ggrep', 'GBrowse']
repo = 'tpope/vim-fugitive'
lua_add = '''
  vim.cmd('cabbrev g Ggrep')
  vim.cmd('cabbrev l Git log --follow -p %')
'''

[[plugins]] # vim-fugitiveのgithubサポート用
repo = 'tpope/vim-rhubarb'

[[plugins]] # gitのdiffを左端に表示
repo = 'airblade/vim-gitgutter'
hook_add = '''
  let g:gitgutter_git_executable = substitute(system('which git'), '\n\+$', '', '')
'''

# コンフリクトをハイライト
# [x や ]x でコンフリクト間を移動
[[plugins]]
repo = 'rhysd/conflict-marker.vim'
hook_add = '''
  let g:conflict_marker_enable_mappings = 0
'''

# 言語
## Ruby
[[plugins]]
# gfを強化してくれる
# A : 関連ファイルに切り替え
# R : 関連ファイルに切り替え2
repo = 'tpope/vim-rails'
on_ft = 'ruby'

[[plugins]] # heredocのsytax-highlight
repo = 'joker1007/vim-ruby-heredoc-syntax'
on_ft = 'ruby'

[[plugins]]
repo = 'pocke/rbs.vim'
on_ft = 'ruby'

## JavaScript

[[plugins]]
repo = 'maxmellon/vim-jsx-pretty'
hook_add = '''
  let g:vim_jsx_pretty_colorful_config = 1
  let g:vim_jsx_pretty_highlight_close_tag = 1
'''
on_ft = ['javascript', 'typescript', 'javascriptreact', 'typescriptreact']

## Crystal

[[plugins]]
repo = 'rhysd/vim-crystal'
on_ft = 'crystal'

## Slim

[[plugins]]
repo = 'slim-template/vim-slim'
on_ft = 'slim'

## Markdown

[[plugins]]
repo = 'plasticboy/vim-markdown'
hook_add = '''
  " markdwonの折りたたみ無効化
  set nofoldenable
  let g:vim_markdown_folding_disabled = 1
  " markdown書くようの設定
  autocmd FileType markdown inoremap <Tab> <Esc>>>A
  autocmd FileType markdown inoremap <S-Tab> <Esc><<A
  let g:vim_markdown_conceal = 0
'''
on_ft = 'markdown'

## HTML

[[plugins]] # htmlのショートカット
repo = 'mattn/emmet-vim'
on_ft = 'html'
# 詳しくは https://raw.githubusercontent.com/mattn/emmet-vim/master/TUTORIAL
# Ctrl z , で展開
hook_add = '''
  let g:user_emmet_leader_key='<C-Z>'
  " let g:user_emmet_install_global = 0
  " auletocmd FileType html,css,typescriptreact EmmetInstall
'''
# (例)
# html:5  : html5のテンプレート
# ul>li*3 : リスト3つ
# div{}   : divタグの中身に{}を入れる
# visualで囲った後に使うと、タグでそれを囲める

## TOML

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

## CSV
[[plugins]]
repo = 'mechatroner/rainbow_csv'
on_ft = 'csv'

## PlantUML
[[plugins]]
repo = 'aklt/plantuml-syntax'
on_ft = 'plantuml'

## logファイル
[[plugins]]
repo = 'mtdl9/vim-log-highlighting'

## terraform
[[plugins]]
repo = 'hashivim/vim-terraform'

# その他
[[plugins]]
repo = 'rizzatti/dash.vim'
hook_add = '''
  cabbrev d Dash
'''

# Github Copilot
[[plugins]]
repo = 'github/copilot.vim'
# 初回起動時に :Copilot setup をする
# 認証情報は ~/.config/github-copilot/hosts.json に入る
lua_add = '''
  vim.api.nvim_set_keymap('i', '<C-f>', '<Plug>(copilot-next)', { silent = true })
  vim.api.nvim_set_keymap('i', '<C-l>', "copilot#Accept('<Right>')", { noremap = true, silent = true, expr = true })
  vim.api.nvim_set_keymap('i', '<Right>', "copilot#Accept('<Right>')", { noremap = true, silent = true, expr = true })

  vim.g.copilot_no_tab_map = true
'''

# 設定の参考：https://qiita.com/lx-sasabo/items/97c49d0f354ea3bdd525 , https://github.com/CopilotC-Nvim/CopilotChat.nvim?tab=readme-ov-file#tips
[[plugins]]
repo = 'CopilotC-Nvim/CopilotChat.nvim'
depends = ['copilot.vim', 'plenary.nvim']
branch = 'canary'
# :CopilotChat とかのコマンドがある
lua_add = '''
  -- 参考: https://qiita.com/lx-sasabo/items/97c49d0f354ea3bdd525

  local select = require('CopilotChat.select')
  require("CopilotChat").setup {
      debug = true, -- Enable debugging,
      highlight_selection = false, -- 選択範囲をハイライトしない
      show_help = false,
      window = {
        width = 0.2,
      },
      -- プロンプトの設定
      prompts = {
        Review = {
          prompt = '/COPILOT_REVIEW このコードをレビューしてください。',
        },
        Commit = {
          prompt = '/COPILOT_COMMIT このコードのコミットメッセージを日本語で考えてください。',
        },
        Explain = {
          prompt = '/COPILOT_EXPLAIN カーソル上のコードの説明を段落をつけて書いてください。',
        },
        Tests = {
          prompt = '/COPILOT_TESTS カーソル上のコードの詳細な単体テスト関数を書いてください。',
        },
        Fix = {
          prompt = '/COPILOT_FIX このコードには問題があります。バグを修正したコードに書き換えてください。',
        },
        Optimize = {
          prompt = '/COPILOT_REFACTOR 選択したコードを最適化し、パフォーマンスと可読性を向上させてください。',
        },
        Docs = {
          prompt = '/COPILOT_REFACTOR 選択したコードのドキュメントを書いてください。ドキュメントをコメントとして追加した元のコードを含むコードブロックで回答してください。使用するプログラミング言語に最も適したドキュメントスタイルを使用してください（例：JavaScriptのJSDoc、Pythonのdocstringsなど）',
        },
        FixDiagnostic = {
          prompt = 'ファイル内の次のような診断上の問題を解決してください：',
          selection = select.diagnostics,
        },
      }
  }

  function CopilotChatBuffer()
    require("CopilotChat").toggle({
      selection = function(source)
        return select.visual(source) or select.buffer(source)
      end
    })
  end
  vim.api.nvim_set_keymap("n", "<Space><Tab>", "<cmd>lua CopilotChatBuffer()<cr>", { noremap = true, silent = true })
  vim.api.nvim_set_keymap("v", "<Space><Tab>", "<cmd>lua CopilotChatBuffer()<cr>", { noremap = true, silent = true })

  -- telescope を使ってアクションプロンプトを表示する
  function ShowCopilotChatActionPrompt()
    local actions = require("CopilotChat.actions")
    require("CopilotChat.integrations.telescope").pick(actions.prompt_actions(), { initial_mode = "normal" })
  end
  vim.api.nvim_set_keymap("n", "<Leader>C", "<cmd>lua ShowCopilotChatActionPrompt()<cr>", { noremap = true, silent = true })
'''

