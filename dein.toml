# color

[[plugins]]
repo = 'cocopon/iceberg.vim'
hook_add = '''
  if has("gui_running") || has("nvim")
    colorscheme iceberg
  endif
'''

# denite
# TODO: ddu.vim に移行したい

[[plugins]]
lazy = 1
on_cmd = 'Denite'
repo = 'Shougo/denite.nvim'
hook_add = '''
  let g:python3_host_prog = "~/.pyenv/shims/python3"

  autocmd FileType denite call s:denite_my_settings()
  function! s:denite_my_settings() abort
    nnoremap <silent><buffer><expr> <CR>    denite#do_map('do_action', 'open')
    nnoremap <silent><buffer><expr> t       denite#do_map('do_action', 'tabopen')
    nnoremap <silent><buffer><expr> s       denite#do_map('do_action', 'split')
    nnoremap <silent><buffer><expr> v       denite#do_map('do_action', 'vsplit')
    nnoremap <silent><buffer><expr> d       denite#do_map('do_action', 'delete')
    nnoremap <silent><buffer><expr> i       denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr> q       denite#do_map('quit')
    nnoremap <silent><buffer><expr> <Space> denite#do_map('toggle_select').'j'
  endfunction

  " https://github.com/Shougo/denite.nvim/blob/master/doc/denite.txt
  nmap <Space>f <esc>:Denite file/rec               -split=tab -auto-action=preview -preview-height=20 -match-highlight<CR>
  nmap <Space>g <esc>:Denite -start-filter grep:::! -split=tab -auto-action=preview -preview-height=20 -match-highlight<CR>
  nmap <Space>b <esc>:Denite buffer                 -split=tab -auto-action=preview -preview-height=20 -match-highlight<CR>
  nmap <Space>r <esc>:Denite -resume                -split=tab<CR>

  " ripgrepを使う https://github.com/Shougo/denite.nvim/blob/master/doc/denite.txt#L2083
  call denite#custom#var('grep', {
  \ 'command': ['rg'],
  \ 'default_opts': ['-i', '--vimgrep', '--no-heading'],
  \ 'recursive_opts': [],
  \ 'pattern_opt': ['--regexp'],
  \ 'separator': ['--'],
  \ 'final_opts': [],
  \ })
'''

# ファイル系

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
  let NERDTreeShowHidden=1
  let NERDTreeWinSize=40
  let NERDTreeShowBookmarks=1
  let g:NERDTreeMapMenu='m'
  nnoremap <Space>t :NERDTreeFind<CR>
  nnoremap <Space>` :NERDTreeFind<CR>
  cabbrev B Bookmark
'''

[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'

[[plugins]] # file_name:123 のように行数指定でファイルを開ける
repo = 'bogado/file-line'

# 補完系

[[plugins]] # 閉じ括弧補間
repo = 'cohama/lexima.vim'

[[plugins]]
repo = 'github/copilot.vim'
# 初回起動時に :Copilot setup をする
# 認証情報は ~/.config/github-copilot/hosts.json に入る
hook_add = '''
  imap <C-]> <Plug>(copilot-next)
  imap <silent><script><expr> <C-l> copilot#Accept("\<Right>")
  imap <silent><script><expr> <C-e> copilot#Accept("\<End>")
  imap <silent><script><expr> <Right> copilot#Accept("\<Right>")
  let g:copilot_no_tab_map = v:true
  nmap <Space>g <cmd>Copilot panel<CR>:setlocal nonumber<CR><C-w>L
'''

# LSP

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
# LspDocumentFormat, LspRename とかも便利そう
hook_add = '''
  let g:lsp_diagnostics_virtual_text_enabled = 0
  " エラーでも赤文字にしない
  let g:lsp_diagnostics_highlights_enabled = 0

  let g:lsp_diagnostics_signs_enabled = 0
  " let g:lsp_diagnostics_signs_error       = {'text': ''}
  " let g:lsp_diagnostics_signs_warning     = {'text': ''}
  " let g:lsp_diagnostics_signs_information = {'text': ''}
  " let g:lsp_diagnostics_signs_hint        = {'text': ''}

  " let g:lsp_diagnostics_float_cursor = 1
  " diagnosticsを即時に出す
  " let g:lsp_diagnostics_float_delay = 100

  nmap <Space><Space> <esc>:LspHover<CR>
  nmap <Space>]       <esc>:LspDefinition<CR>
  nmap <Space>[       <esc>:LspReference<CR>
  nmap <Space>d       <esc>:LspDocumentDiagnostics<CR>

  " autocmd! BufWritePre *.rb call execute('LspDocumentFormatSync')
  autocmd User lsp_setup call lsp#register_server({
    \ 'name': 'rubocop',
    \ 'cmd': {server_info->['rubocop', '--lsp']},
    \ 'allowlist': ['ruby'],
    \ })
'''

# ここらへんのインストールが必要そう
# gem install rubocop-performance
# gem install rubocop-rspec
# gem install neovim
# g:ruby_host_prog
[[plugins]]
repo = 'mattn/vim-lsp-settings'
hook_add = '''
  command! LspDebug let lsp_log_verbose=1 | let lsp_log_file = expand('~/Downloads/lsp.log') | call system("echo -n '' > ~/Downloads/lsp.log") | tabnew ~/Downloads/lsp.log
  let g:lsp_settings_filetype_ruby = ['steep', 'solargraph', 'rubocop']
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'

[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'

[[plugins]]
repo = 'liuchengxu/vista.vim'
hook_add = '''
  nnoremap <Space>v :Vista!!<CR>

  let g:vista_default_executive = 'vim_lsp'
  let g:vista_sidebar_position = 'vertical topleft'
  let g:vista#renderer#enable_icon = 0
  let g:vista_icon_indent = ['- ', '- ']
  let g:vista_fold_toggle_icons = ['v', '>']
  let g:vista_blink = [0, 0]
  let g:vista_top_level_blink = [0, 0]
  let g:vista_sidebar_width = 40
'''

# 操作系

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]] # 選択箇所をyankで置き換え
repo = 'kana/vim-operator-replace'
hook_add = '''
  " replace operater
  nmap R <Plug>(operator-replace)
'''

[[plugins]] # kana/vim-operator-replaceが依存している
repo = 'kana/vim-operator-user'

[[plugins]] # CamelCase <=> snake_case
repo = 'tyru/operator-camelize.vim'
hook_add = '''
  vmap <Space>s <Plug>(operator-camelize-toggle)
'''

[[plugins]]
repo = 'scrooloose/nerdcommenter'
hook_add = '''
  " コメントアウト時にスペース1個
  let g:NERDSpaceDelims=1
  let g:NERDDefaultAlign = 'left'
  " Ctrl + スラッシュでエスケープ
  vmap <C-c> <Leader>c<Space>
'''

# 表示系

[[plugins]]
repo = 'itchyny/lightline.vim'
# https://github.com/itchyny/lightline.vim/issues/293#issuecomment-373710096
hook_add = '''
  let g:lightline = {
        \ 'colorscheme': 'PaperColor',
        \ 'component_function': {
        \   'filename': 'LightlineFilename',
        \ }
        \ }
  function! LightlineFilename()
    let root = fnamemodify(get(b:, 'git_dir'), ':h')
    let path = expand('%:p')
    if path[:len(root)-1] ==# root
      return path[len(root)+1:]
    endif
    return expand('%')
  endfunction
'''

[[plugins]] # 余分な空白を赤く
repo = 'bronson/vim-trailing-whitespace'
hook_add = '''
  " unite vim でも機能するのを止める
  let g:extra_whitespace_ignored_filetypes = ['unite']
'''

[[plugins]]
repo = 'simeji/winresizer'
hook_add = '''
  " ctrl+eでのリサイズのサイズ
  let g:winresizer_vert_resize = 5
'''

[[plugins]] # カーソル下の単語を移動するたびにハイライトする
repo = 'osyo-manga/vim-brightest'
hook_add = '''
  let g:brightest#highlight = { "group" : "BrightestUnderline" }
  let g:brightest#pattern = '\k\+'
'''

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
  let g:indent_guides_enable_on_vim_startup = 1
  autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=none
  autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=234
'''

# 検索・置換系

[[plugins]] # rubyやperl風正規表現(インクリメンタルサーチはできない)
repo = 'othree/eregex.vim'
# "/" will use :M/ to search. ",/" will use the original "/".
hook_add = '''
  let g:eregex_default_enable = 0
  nnoremap r/ :M/
'''

[[plugins]] # 検索結果数カウント
repo = 'henrik/vim-indexed-search'
hook_add = '''
  let g:indexed_search_dont_move = 1 " 検索時に1個下に動かないようになる
  let g:indexed_search_numbered_only = 1 " 検索カウントを簡素な表示に
  let g:indexed_search_shortmess = 1 " 検索カウントを簡素な表示に
'''

# mark系

[[plugins]]
repo = 'kshenoy/vim-signature'
hook_add = '''
  let g:SignatureMap = { 'Leader' : "m", 'PlaceNextMark' : "", 'ToggleMarkAtLine' : "<Space>m", 'PurgeMarksAtLine' : "", 'DeleteMark' : "", 'PurgeMarks' : "", 'PurgeMarkers' : "", 'GotoNextLineAlpha' : "", 'GotoPrevLineAlpha' : "", 'GotoNextSpotAlpha' : "", 'GotoPrevSpotAlpha' : "", 'GotoNextLineByPos' : "", 'GotoPrevLineByPos' : "", 'GotoNextSpotByPos' : "", 'GotoPrevSpotByPos' : "", 'GotoNextMarker' : "", 'GotoPrevMarker' : "", 'GotoNextMarkerAny' : "", 'GotoPrevMarkerAny' : "", 'ListBufferMarks' : "", 'ListBufferMarkers' : "" }
  let g:SignatureIncludeMarks = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  nmap <Space>M :delmarks A-Z<CR>
'''

[[plugins]] # コードに色付け(markとは別物) https://secret-garden.hatenablog.com/
repo = 't9md/vim-quickhl'
hook_add = '''
  nmap <Space>h <Plug>(quickhl-manual-this)
  xmap <Space>h <Plug>(quickhl-manual-this)
  nmap <Space>H <Plug>(quickhl-manual-reset)
'''

# git系

[[plugins]] # gitコマンドをvimから使う
lazy = 1
on_cmd = ['Git', 'Ggrep', 'GBrowse']
repo = 'tpope/vim-fugitive'
hook_add = '''
  cabbrev g Ggrep
  cabbrev b GBrowse
  cabbrev l Git log --follow -p %
'''


[[plugins]] # vim-fugitiveのgithubサポート用
repo = 'tpope/vim-rhubarb'

[[plugins]] # gitのdiffを左端に表示
repo = 'airblade/vim-gitgutter'
hook_add = '''
  let g:gitgutter_git_executable = substitute(system('which git'), '\n\+$', '', '')
'''

[[plugins]] # gitのviewer. :Agit, :AgitFile
lazy = 1
on_cmd = ['Agit', 'AgitFile']
repo = 'cohama/agit.vim'
hook_add = '''
  nmap <Space>a :AgitFile<CR>
'''

# コンフリクトをハイライト
# [x や ]x でコンフリクト間を移動
[[plugins]]
repo = 'rhysd/conflict-marker.vim'
hook_add = '''
  let g:conflict_marker_enable_mappings = 0
'''

# 言語系

## Ruby

[[plugins]]
repo = 'tpope/vim-endwise'
on_ft = 'ruby'

[[plugins]]
repo = 'tpope/vim-rails'
on_ft = 'ruby'

[[plugins]] # heredocのsytax-highlight
repo = 'joker1007/vim-ruby-heredoc-syntax'
on_ft = 'ruby'

[[plugins]]
repo = 'pocke/rbs.vim'
on_ft = 'ruby'

[[plugins]]
repo = 'mrkn/vim-cruby' # set ft=c, set ft=cruby
# hook_add = '''
#   autocmd BufWinEnter,BufNewFile *.c,*.h,insns.def setlocal filetype=cruby
# '''

## JavaScript

[[plugins]]
repo = 'maxmellon/vim-jsx-pretty'
hook_add = '''
  let g:vim_jsx_pretty_colorful_config = 1
  let g:vim_jsx_pretty_highlight_close_tag = 1
'''
on_ft = ['javascript', 'typescript', 'javascriptreact', 'typescriptreact']

## Crystal

[[plugins]]
repo = 'rhysd/vim-crystal'
on_ft = 'crystal'

## Slim

[[plugins]]
repo = 'slim-template/vim-slim'
on_ft = 'slim'

## Markdown

[[plugins]]
repo = 'plasticboy/vim-markdown'
hook_add = '''
  " markdwonの折りたたみ無効化
  set nofoldenable
  let g:vim_markdown_folding_disabled = 1
  " markdown書くようの設定
  autocmd FileType markdown inoremap <Tab> <Esc>>>A
  autocmd FileType markdown inoremap <S-Tab> <Esc><<A
  let g:vim_markdown_conceal = 0
'''
on_ft = 'markdown'

## LaTeX

[[plugins]]
repo = 'lervag/vimtex'
hook_add = '''
  " pdflatexをコンパイル
  let g:latex_latexmk_options = '-pdf'
'''
on_ft = 'tex'

## HTML

[[plugins]] # htmlのショートカット
repo = 'mattn/emmet-vim'
on_ft = 'html'
# 詳しくは https://raw.githubusercontent.com/mattn/emmet-vim/master/TUTORIAL
# Ctrl m , で展開
hook_add = '''
  let g:user_emmet_leader_key='<C-Z>'
  " let g:user_emmet_install_global = 0
  " auletocmd FileType html,css,typescriptreact EmmetInstall
'''
# (例)
# html:5  : html5のテンプレート
# ul>li*3 : リスト3つ
# div{}   : divタグの中身に{}を入れる
# visualで囲った後に使うと、タグでそれを囲める

## TOML

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

## CSV
[[plugins]]
repo = 'mechatroner/rainbow_csv'
on_ft = 'csv'

## PlantUML
[[plugins]]
repo = 'aklt/plantuml-syntax'
on_ft = 'plantuml'

[[plugins]]
repo = 'rizzatti/dash.vim'
hook_add = '''
  cabbrev d Dash
'''
