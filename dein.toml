[[plugins]]
repo = 'nvim-lua/plenary.nvim'

# Color
[[plugins]]
repo = 'cocopon/iceberg.vim'
# highlightの設定は https://github.com/cocopon/iceberg.vim/issues/101 がcloseするまで
lua_add = '''
  vim.cmd('colorscheme iceberg')
  vim.cmd('highlight FloatBorder guibg=#242940 guifg=#242940 ctermbg=none')
'''

[[plugins]]
# 検索したものは <C-t> で新規タブで開ける
repo = 'nvim-telescope/telescope.nvim'
depends = ['nvim-lua/plenary.nvim', 'natecraddock/telescope-zf-native.nvim']
lua_add = '''
  -- live_grep は ripgrep に依存している
  vim.api.nvim_set_keymap('n', '<Space>f', ':lua require("telescope.builtin").find_files({ initial_mode = "normal" })<cr>', { noremap = true })
  vim.api.nvim_set_keymap('n', '<Space>?', ':lua require("telescope.builtin").help_tags({ initial_mode = "normal" })<cr>', { noremap = true }) -- helpを絞り込んで探せる(helpの連想で?のキー)
  vim.api.nvim_set_keymap('n', '<Space>b', ':lua require("telescope.builtin").buffers({ initial_mode = "normal" })<cr>', { noremap = true })
  vim.api.nvim_set_keymap('n', '<Space>r', ':lua require("telescope.builtin").resume({ initial_mode = "normal" })<cr>', { noremap = true })

  -- 折りたたみを無効化する 参考: https://github.com/nvim-telescope/telescope.nvim/issues/991#issuecomment-1429539473
  vim.api.nvim_create_autocmd("FileType", { pattern = "TelescopeResults", command = [[setlocal nofoldenable]] })

  -- 参考: https://dev.classmethod.jp/articles/nvim_telescope
  require('telescope').setup({
    defaults = {
      mappings = {
        n = {
          ["<esc>"] = require('telescope.actions').close,
          ["<C-d>"] = require('telescope.actions').close,
          ["q"] = require('telescope.actions').close,
        },
        i = {
          ["<esc>"] = require('telescope.actions').close,
        }
      },
      preview = {
        treesitter = { enable = false, } -- 右側に表示されるプレビューまわりでtreesitterのエラーが起きるのでtelescope内では無効化する
      },
    },
    ["zf-native"] = {
        -- options for sorting file-like items
        file = {
            -- override default telescope file sorter
            enable = true,
            -- highlight matching text in results
            highlight_results = true,
            -- enable zf filename match priority
            match_filename = false,
        },

        -- options for sorting all other items
        generic = {
            -- override default telescope generic item sorter
            enable = true,
            -- highlight matching text in results
            highlight_results = true,
            -- disable zf filename match priority
            match_filename = false,
        },
    }
  })
'''

[[plugins]]
repo = 'LukasPietzschmann/telescope-tabs'
depends = ['nvim-telescope/telescope.nvim']
lua_add = '''
  require('telescope').load_extension('telescope-tabs')
  require('telescope-tabs').setup{}
  vim.api.nvim_set_keymap('n', 't', ':lua require("telescope-tabs").list_tabs({ initial_mode = "normal" })<cr>', { noremap = true })
'''

[[plugins]]
repo = 'nvim-telescope/telescope-live-grep-args.nvim'
depends = ['nvim-telescope/telescope.nvim']
# "" や '' で囲むと、その次の語句でdirを指定できる
lua_add = '''
  require('telescope').load_extension('live_grep_args')
  vim.api.nvim_set_keymap('n', '<Space>g', ':lua require("telescope").extensions.live_grep_args.live_grep_args({ initial_mode = "normal" })<cr>', { noremap = true }) -- grepのg
'''


# fuzzy finder
# telescopeで使っている
[[plugins]]
repo = 'natecraddock/telescope-zf-native.nvim'
lua_add = '''
  -- telescopeの方にも設定あり
  require('telescope').load_extension('zf-native')
'''

# ファイル
[[plugins]]
repo = 'scrooloose/nerdtree'
depends = ['ryanoasis/vim-devicons']
lua_add = '''
  vim.g.NERDTreeShowHidden = 1
  vim.g.NERDTreeWinSize = 30
  vim.g.NERDTreeShowBookmarks = 1
  vim.g.NERDTreeMapMenu = 'm'
  vim.api.nvim_set_keymap('n', '<Space>`', ':NERDTreeFind<CR>', { noremap = true, silent = true })
  vim.cmd('cabbrev B Bookmark')
'''

[[plugins]]
repo = 'ryanoasis/vim-devicons'

[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'

[[plugins]] # file_name:123 のように行数指定でファイルを開ける
repo = 'bogado/file-line'

# 補完
# LSP
[[plugins]]
repo = 'prabirshrestha/vim-lsp'
# LspDocumentFormat, LspRename とかも便利そう
lua_add = '''
  -- モード
  vim.g.lsp_mode = "none" -- "none" | "hover" | "diagnostics"
  vim.api.nvim_set_keymap('n', '<F4>', ':lua ToggleLsp()<CR>', { noremap = true })

  -- 切り替え関数の内部実装(hover)
  vim.api.nvim_command('autocmd CursorMoved * lua ShowLspHover()') -- カーソルを移動するごとにLspHoverの結果を表示する
  function ShowLspHover()
    if vim.g.lsp_toggle_hover then
      vim.cmd('silent LspHover')

      vim.defer_fn(function() -- LspHoverで開いたfloating windowはなぜか一番下にスクロールされているので、見つけ出してtopに戻す
        local float_windows = GetFloatingWindows()
        for _, win_id in ipairs(float_windows) do
          vim.api.nvim_win_set_cursor(win_id, {1, 0})
        end
      end, 100)
    end
  end

  -- 切り替え関数の内部実装(diagnostics)
  function toggle_diagnostics(toggle)
    vim.g.lsp_diagnostics_float_cursor = toggle

    for _, bufnr in ipairs(vim.api.nvim_list_bufs()) do
      if toggle then
        vim.api.nvim_call_function('lsp#enable_diagnostics_for_buffer', { bufnr })
      else
        vim.api.nvim_call_function('lsp#disable_diagnostics_for_buffer', { bufnr })
      end
    end
  end

  -- 初期設定
  vim.g.lsp_toggle_hover = false
  vim.g.lsp_toggle_diagnostics = false
  toggle_diagnostics(true) -- 最初っからfalseにするとtrueに切り替えたときに何故か表示されないため初期値はtrueにしておいて、0.1s後にfalseにする
  vim.defer_fn(function()
    toggle_diagnostics(false)
  end, 100)

  -- モード切り替え関数
  function ToggleLsp()
    if vim.g.lsp_mode == "none" then
      vim.g.lsp_mode = "hover"
      vim.g.lsp_toggle_hover = true
    elseif vim.g.lsp_mode == "hover" then
      vim.g.lsp_mode = "diagnostics"
      vim.g.lsp_toggle_hover = false
      vim.g.lsp_toggle_diagnostics = true
    elseif vim.g.lsp_mode == "diagnostics" then
      vim.g.lsp_mode = "none"
      vim.g.lsp_toggle_diagnostics = false
    end

    toggle_diagnostics(vim.g.lsp_toggle_diagnostics)
    print("LSP mode : " .. vim.g.lsp_mode)
  end

  -- hover表示は遅延させない
  vim.g.lsp_diagnostics_float_delay = 0
  -- エラーを行の右側に出さない
  vim.g.lsp_diagnostics_virtual_text_enabled = false
  -- エラーでも赤文字にしない
  vim.g.lsp_diagnostics_highlights_enabled = false

  vim.api.nvim_set_keymap('n', 'L', '<Plug>(lsp-hover)', { noremap = true }) -- lookのLと覚えよう
  vim.api.nvim_set_keymap('n', '<Space>]', '<Plug>(lsp-definition)', { noremap = true })
  vim.api.nvim_set_keymap('n', '<Space>[', '<Plug>(lsp-references)', { noremap = true })

  vim.g.lsp_float_max_width = 0

  vim.cmd([[
    autocmd User lsp_setup call lsp#register_server({
      \ 'name': 'rubocop',
      \ 'cmd': {server_info->['rubocop', '--lsp']},
      \ 'allowlist': ['ruby'],
      \ })
  ]])
'''

# ここらへんのインストールが必要そう
# gem install rubocop-performance
# gem install rubocop-rspec
# gem install neovim
# g:ruby_host_prog
[[plugins]]
repo = 'mattn/vim-lsp-settings'
# 設定ファイル:   https://github.com/mattn/vim-lsp-settings/tree/master/settings
# インストーラー: https://github.com/mattn/vim-lsp-settings/tree/master/installer
hook_add = '''
  command! LspDebug let lsp_log_verbose=1 | let lsp_log_file = expand('~/Downloads/lsp.log') | call system("echo -n '' > ~/Downloads/lsp.log") | tabnew ~/Downloads/lsp.log
  let g:lsp_settings_filetype_ruby = ['steep', 'solargraph', 'rubocop']
'''

# 操作
[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]] # :Align , のように使う
repo = 'vim-scripts/Align'

[[plugins]] # 選択箇所をyankで置き換え
repo = 'kana/vim-operator-replace'
lua_add = '''
  vim.api.nvim_set_keymap('n', 'R', '<Plug>(operator-replace)', {})
'''

[[plugins]] # kana/vim-operator-replaceが依存している
repo = 'kana/vim-operator-user'

[[plugins]] # CamelCase <=> snake_case
repo = 'tyru/operator-camelize.vim'
lua_add = '''
  vim.api.nvim_set_keymap('v', '<Space>s', '<Plug>(operator-camelize-toggle)', {})
'''

[[plugins]]
repo = 'scrooloose/nerdcommenter'
lua_add = '''
  vim.g.NERDSpaceDelims = 1
  vim.g.NERDDefaultAlign = 'left'
  vim.api.nvim_set_keymap('v', '<C-c>', '<Leader>c<Space>', {})
'''

# 表示
[[plugins]]
repo = 'akinsho/bufferline.nvim'
depends = ['nvim-tree/nvim-web-devicons']
lua_add = '''
  vim.opt.termguicolors = true
  require("bufferline").setup {
    options = {
      mode = "tabs",
      tab_size = 1,
      show_close_icon = false,
      show_buffer_close_icons = false,
      show_duplicate_prefix = false,
    }
  }
'''

[[plugins]]
repo = 'nvim-tree/nvim-web-devicons'

[[plugins]]
repo = 'nvim-lualine/lualine.nvim'
depends = ['nvim-tree/nvim-web-devicons']
lua_add = '''
  require('lualine').setup({
    options = { theme = 'iceberg_dark' },
    sections = {
      lualine_c = { { 'filename', file_status = true, path = 3 } },
    }
  })
'''


[[plugins]]
repo = 'simeji/winresizer'
hook_add = '''
  let g:winresizer_vert_resize = 5
  let g:winresizer_start_key = '<F1>'
'''

[[plugins]] # カーソル下の単語を移動するたびにハイライトする
repo = 'osyo-manga/vim-brightest'
hook_add = '''
  let g:brightest#highlight = { "group" : "BrightestUnderline" }
  let g:brightest#pattern = '\k\+'
'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
# これらを実行する
# :TSInstall ruby toml javascript typescript html css json yaml lua rust c cpp swift go haskell
# 確認
# :TSInstallInfo
hook_post_update = '''
  TSUpdate
'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter-context'
depends = ['nvim-treesitter']

[[plugins]] # 引数のハイライト
repo = 'm-demare/hlargs.nvim'
depends = ['nvim-treesitter']
lua_add = '''
  require('hlargs').setup {
    color = '#C0D0FF'
  }
'''

[[plugins]]
repo = 'lukas-reineke/indent-blankline.nvim'
depends = ['nvim-treesitter']
# https://github.com/lukas-reineke/indent-blankline.nvim?tab=readme-ov-file#background-color-indentation-guides
lua_add = '''
  local highlight = {
    "CursorColumn",
    "Whitespace",
  }
  require("ibl").setup {
    indent = { highlight = highlight, char = "" },
    whitespace = {
      highlight = highlight,
      remove_blankline_trail = false,
    },
    scope = { enabled = false },
  }
'''

[[plugins]] # 閉じ括弧補間
repo = 'cohama/lexima.vim'

[[plugins]]
repo = 'ntpeters/vim-better-whitespace'
hook_add = '''
  let g:better_whitespace_guicolor = 'DarkRed'
'''

# 検索・置換
[[plugins]]
repo = 'othree/eregex.vim'
# /  : 普通の検索 (インクリメンタルサーチ可)
# ? : Rubyの正規表現で検索
# %s : 通常の置換
# %S : Rubyの正規表現で置換
# [Rubyの正規表現のみで使えるもの]
# \d
# a|b
# a*
# a+
# (a)
# などなど
hook_add = '''
  let g:eregex_default_enable = 0
  nnoremap ? :M/
'''

[[plugins]] # 検索結果数カウント
repo = 'henrik/vim-indexed-search'
hook_add = '''
  let g:indexed_search_dont_move = 1 " 検索時に1個下に動かないようになる
  let g:indexed_search_numbered_only = 1 " 検索カウントを簡素な表示に
  let g:indexed_search_shortmess = 1 " 検索カウントを簡素な表示に
'''

# mark
[[plugins]]
repo = 'kshenoy/vim-signature'
lua_add = '''
  vim.g.SignatureMap = { ToggleMarkAtLine = "<Space>m", }
  vim.g.SignatureIncludeMarks = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  vim.api.nvim_set_keymap('n', '<Space>M', ':delmarks A-Z<CR>', { silent = true })
'''

[[plugins]] # コードに色付け(markとは別物) https://secret-garden.hatenablog.com/
repo = 't9md/vim-quickhl'
lua_add = '''
  local pattern = ('binding.pry,binding.irb,NOTE:,MEMO:,<<<<<<<,>>>>>>>,======='):gsub(",", "\\|")
  vim.api.nvim_set_keymap('n', '<Space>h', '<Plug>(quickhl-manual-this)', { silent = true })
  vim.api.nvim_set_keymap('x', '<Space>h', '<Plug>(quickhl-manual-this)', { silent = true })
  vim.api.nvim_set_keymap('n', '<Space>H', '<Plug>(quickhl-manual-reset)', {silent = true })
  vim.g.quickhl_manual_enable_at_startup = 1
  vim.g.quickhl_manual_keywords = { { pattern = pattern, regexp = 1 }, }
'''

# git
[[plugins]] # gitコマンドをvimから使う
lazy = 1
on_cmd = ['Git', 'Ggrep', 'GBrowse']
repo = 'tpope/vim-fugitive'
lua_add = '''
  vim.cmd('cabbrev g Ggrep')
  vim.cmd('cabbrev b lua BrowseDevelop()')
  vim.cmd('cabbrev l Git log --follow -p %')

  function BrowseDevelop()
    vim.cmd('GBrowse!')
    local url = vim.fn.getreg('+') -- レジスタ '+' に GBrowse! の結果が格納される
    local default_branch = vim.fn.systemlist("git default-branch")[1]
    local new_url = url:gsub("/blob/[^/]+", "/blob/" .. default_branch)
    vim.fn.setreg('+', new_url) -- 新しいURLをクリップボードにコピー
    -- print("Copied to clipboard: " .. new_url)
    vim.fn.system({"open", new_url})
  end
'''

[[plugins]] # vim-fugitiveのgithubサポート用
repo = 'tpope/vim-rhubarb'

[[plugins]] # gitのdiffを左端に表示
repo = 'airblade/vim-gitgutter'
hook_add = '''
  let g:gitgutter_git_executable = substitute(system('which git'), '\n\+$', '', '')
'''

# コンフリクトをハイライト
# [x や ]x でコンフリクト間を移動
[[plugins]]
repo = 'rhysd/conflict-marker.vim'
hook_add = '''
  let g:conflict_marker_enable_mappings = 0
'''

# 言語
## Ruby
[[plugins]]
# gfを強化してくれる
# A : 関連ファイルに切り替え
# R : 関連ファイルに切り替え2
repo = 'tpope/vim-rails'
on_ft = 'ruby'

[[plugins]] # heredocのsytax-highlight
repo = 'joker1007/vim-ruby-heredoc-syntax'
on_ft = 'ruby'

[[plugins]]
repo = 'pocke/rbs.vim'
on_ft = 'ruby'

## JavaScript

[[plugins]]
repo = 'maxmellon/vim-jsx-pretty'
hook_add = '''
  let g:vim_jsx_pretty_colorful_config = 1
  let g:vim_jsx_pretty_highlight_close_tag = 1
'''
on_ft = ['javascript', 'typescript', 'javascriptreact', 'typescriptreact']

## Crystal

[[plugins]]
repo = 'rhysd/vim-crystal'
on_ft = 'crystal'

## Slim

[[plugins]]
repo = 'slim-template/vim-slim'
on_ft = 'slim'

## Markdown

[[plugins]]
repo = 'plasticboy/vim-markdown'
hook_add = '''
  " markdwonの折りたたみ無効化
  set nofoldenable
  let g:vim_markdown_folding_disabled = 1
  " markdown書くようの設定
  autocmd FileType markdown inoremap <Tab> <Esc>>>A
  autocmd FileType markdown inoremap <S-Tab> <Esc><<A
  let g:vim_markdown_conceal = 0
'''
on_ft = 'markdown'

## HTML

[[plugins]] # htmlのショートカット
repo = 'mattn/emmet-vim'
on_ft = 'html'
# 詳しくは https://raw.githubusercontent.com/mattn/emmet-vim/master/TUTORIAL
# Ctrl z , で展開
hook_add = '''
  let g:user_emmet_leader_key='<C-Z>'
  " let g:user_emmet_install_global = 0
  " auletocmd FileType html,css,typescriptreact EmmetInstall
'''
# (例)
# html:5  : html5のテンプレート
# ul>li*3 : リスト3つ
# div{}   : divタグの中身に{}を入れる
# visualで囲った後に使うと、タグでそれを囲める

## TOML

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

## CSV
[[plugins]]
repo = 'mechatroner/rainbow_csv'
on_ft = 'csv'

## PlantUML
[[plugins]]
repo = 'aklt/plantuml-syntax'
on_ft = 'plantuml'

## logファイル
[[plugins]]
repo = 'mtdl9/vim-log-highlighting'

## terraform
[[plugins]]
repo = 'hashivim/vim-terraform'

# その他
[[plugins]]
repo = 'rizzatti/dash.vim'
hook_add = '''
  cabbrev d Dash
'''
