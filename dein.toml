# https://github.com/Shougo/dein.vim/blob/master/doc/dein.txt
# depends を指定するときは名前のみ指定する
# depends に指定しただけではインストールまではされず、別途 [[plugins]] で指定する必要がある

# 環境
[[plugins]]
repo = 'vim-denops/denops.vim'

[[plugins]] # :DenopsHello => Hello
repo = 'vim-denops/denops-helloworld.vim'

[[plugins]]
repo = 'nvim-lua/plenary.nvim'

# color

[[plugins]]
repo = 'cocopon/iceberg.vim'
# highlightの設定は https://github.com/cocopon/iceberg.vim/issues/101 がcloseするまで
lua_add = '''
  vim.cmd('colorscheme iceberg')
  vim.cmd('highlight FloatBorder guibg=#242940 guifg=#242940 ctermbg=none')
'''

# fuzzy finder

[[plugins]]
repo = 'natecraddock/telescope-zf-native.nvim'

[[plugins]]
repo = 'nvim-telescope/telescope.nvim'
depends = ['nvim-lua/plenary.nvim', 'natecraddock/telescope-zf-native.nvim']
lua_add = '''
  -- live_grep は ripgrep に依存している
  vim.api.nvim_set_keymap('n', '<Space>f', ':lua require("telescope.builtin").find_files()<cr>', { noremap = true })
  vim.api.nvim_set_keymap('n', '<Space>g', ':lua require("telescope.builtin").live_grep()<cr>',  { noremap = true })
  vim.api.nvim_set_keymap('n', '<Space>b', ':lua require("telescope.builtin").buffers()<cr>',    { noremap = true })
  vim.api.nvim_set_keymap('n', '<Space>r', ':lua require("telescope.builtin").resume()<cr>',     { noremap = true })

  vim.api.nvim_create_user_command('H', function()
    require("telescope.builtin").help_tags()
  end, {})

  -- 参考: https://dev.classmethod.jp/articles/nvim_telescope
  require('telescope').setup({
    defaults = {
      mappings = {
        n = {
          ["<esc>"] = require('telescope.actions').close,
          ["<Space>q"] = require('telescope.actions').close,
        },
        i = {
          ["<esc>"] = require('telescope.actions').close,
        }
      },
    },
    ["zf-native"] = {
        -- options for sorting file-like items
        file = {
            -- override default telescope file sorter
            enable = true,
            -- highlight matching text in results
            highlight_results = true,
            -- enable zf filename match priority
            match_filename = false, -- !!!
        },

        -- options for sorting all other items
        generic = {
            -- override default telescope generic item sorter
            enable = true,
            -- highlight matching text in results
            highlight_results = true,
            -- disable zf filename match priority
            match_filename = false,
        },
    }
  })
  require('telescope').load_extension('zf-native')
'''

# ファイル
[[plugins]]
repo = 'scrooloose/nerdtree'
lua_add = '''
  vim.g.NERDTreeShowHidden = 1
  vim.g.NERDTreeWinSize = 40
  vim.g.NERDTreeShowBookmarks = 1
  vim.g.NERDTreeMapMenu = 'm'
  vim.api.nvim_set_keymap('n', '<Space><Esc>', ':NERDTreeFind<CR>', { noremap = true, silent = true })
  vim.api.nvim_set_keymap('n', '<Space>`', ':NERDTreeFind<CR>', { noremap = true, silent = true })
  vim.cmd('cabbrev B Bookmark')
'''

[[plugins]] # nerd tree で nerd font
repo = 'ryanoasis/vim-devicons'
depends = ['scrooloose/nerdtree']

[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'

[[plugins]] # file_name:123 のように行数指定でファイルを開ける
repo = 'bogado/file-line'

# 補完系

[[plugins]]
repo = 'Shougo/ddc-ui-native'

[[plugins]]
repo = 'Shougo/ddc-source-around'

[[plugins]]
repo = 'shun/ddc-source-vim-lsp'

[[plugins]]
repo = 'Shougo/ddc-matcher_head'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'

[[plugins]]
repo = 'Shougo/ddc-converter_remove_overlap'

# 操作性が悪いから使わない
# [[plugins]]
# repo = 'Shougo/ddc-source-copilot'
# \ 'copilot': {
# \   'mark': '[Copilot]',
# \   'matchers': [],
# \   'minAutoCompleteLength': 0,
# \ }

[[plugins]] # multiple_plugins で設定すると自動でインストールされないみたいだから1個ずつ列挙してdependsに追加する
repo = 'Shougo/ddc.vim'
depends = [
  'ddc-ui-native',
  'ddc-source-around',
  'ddc-source-vim-lsp'
  'ddc-matcher_head',
  'ddc-sorter_rank',
  'ddc-converter_remove_overlap',
]
lua_add = '''
  vim.fn['ddc#custom#patch_global']('ui', 'native')
  vim.fn['ddc#custom#patch_global']('sources', {'vim-lsp', 'around'})
  vim.fn['ddc#custom#patch_global']('sourceOptions', {
    _ = {
      matchers = {'matcher_head'},
      sorters = {'sorter_rank'},
      converters = {'converter_remove_overlap'},
      ignoreCase = true,
      minAutoCompleteLength = 1,
    },
    around = {
      mark = '[Around]',
      minAutoCompleteLength = 1,
    },
    ['vim-lsp'] = {
      mark = '[LSP]',
      matchers = {'matcher_head'},
      forceCompletionPattern = '\\.|:|->|"\\w+/*',
      minAutoCompleteLength = 1,
    },
  })
  vim.fn['ddc#custom#patch_global']('sourceParams', {
    around = {
      maxSize = 500,
    },
  })
  vim.fn['ddc#enable']()
'''
# lua_addだとうまく行かないからhook_addでmapする
hook_add = '''
  inoremap <silent><expr> <TAB>
  \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
  \ '<TAB>' : ddc#manual_complete()

  inoremap <expr><S-TAB> <C-h>
'''

[[plugins]]
repo = 'github/copilot.vim'
# 初回起動時に :Copilot setup をする
# 認証情報は ~/.config/github-copilot/hosts.json に入る
hook_add = '''
 " fallbackのf
 imap <C-f> <Plug>(copilot-next)
 imap <silent><script><expr> <C-l> copilot#Accept("\<Right>")
 imap <silent><script><expr> <C-e> copilot#Accept("\<End>")
 imap <silent><script><expr> <Right> copilot#Accept("\<Right>")
 let g:copilot_no_tab_map = v:true
 nmap <C-g> <cmd>Copilot panel<CR>:setlocal nonumber<CR><C-w>L
'''

# LSP

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
# LspDocumentFormat, LspRename とかも便利そう
lua_add = '''
  vim.g.lsp_diagnostics_virtual_text_enabled = false
  -- エラーでも赤文字にしない
  vim.g.lsp_diagnostics_highlights_enabled = false

  -- vim.g.lsp_diagnostics_signs_enabled = false
  -- vim.g.lsp_diagnostics_signs_error = { text = '' }
  -- vim.g.lsp_diagnostics_signs_warning = { text = '' }
  vim.g.lsp_diagnostics_signs_information = { text = '' }
  vim.g.lsp_diagnostics_signs_hint = { text = '' }

  -- vim.g.lsp_diagnostics_float_cursor = true
  -- diagnosticsを即時に出す
  -- vim.g.lsp_diagnostics_float_delay = 100

  vim.api.nvim_set_keymap('n', '<Space><Space>', '<Plug>(lsp-hover)', { noremap = true })
  vim.api.nvim_set_keymap('n', '<Space>]',       '<Plug>(lsp-definition)', { noremap = true })
  vim.api.nvim_set_keymap('n', '<Space>[',       '<Plug>(lsp-references)', { noremap = true })
  vim.api.nvim_set_keymap('n', '<Space>d',       '<esc>:LspDocumentDiagnostics<CR>', { noremap = true })

  vim.api.nvim_set_keymap('n', '<M-u>', '<Cmd>call lsp#scroll(-10)<CR>',  { noremap = true })
  vim.api.nvim_set_keymap('n', '<M-k>', '<Cmd>call lsp#scroll(-1) <CR>',   { noremap = true })
  vim.api.nvim_set_keymap('n', '<M-j>', '<Cmd>call lsp#scroll(+1) <CR>',   { noremap = true })
  vim.api.nvim_set_keymap('n', '<M-d>', '<Cmd>call lsp#scroll(+10)<CR>',  { noremap = true })

  vim.cmd([[
    autocmd User lsp_setup call lsp#register_server({
      \ 'name': 'rubocop',
      \ 'cmd': {server_info->['rubocop', '--lsp']},
      \ 'allowlist': ['ruby'],
      \ })
  ]])
'''

# ここらへんのインストールが必要そう
# gem install rubocop-performance
# gem install rubocop-rspec
# gem install neovim
# g:ruby_host_prog
[[plugins]]
repo = 'mattn/vim-lsp-settings'
# 設定ファイル:   https://github.com/mattn/vim-lsp-settings/tree/master/settings
# インストーラー: https://github.com/mattn/vim-lsp-settings/tree/master/installer
hook_add = '''
  command! LspDebug let lsp_log_verbose=1 | let lsp_log_file = expand('~/Downloads/lsp.log') | call system("echo -n '' > ~/Downloads/lsp.log") | tabnew ~/Downloads/lsp.log
  let g:lsp_settings_filetype_ruby = ['steep', 'solargraph', 'rubocop']
'''

# 操作系

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]] # 選択箇所をyankで置き換え
repo = 'kana/vim-operator-replace'
lua_add = '''
  vim.api.nvim_set_keymap('n', 'R', '<Plug>(operator-replace)', {})
'''

[[plugins]] # kana/vim-operator-replaceが依存している
repo = 'kana/vim-operator-user'

[[plugins]] # CamelCase <=> snake_case
repo = 'tyru/operator-camelize.vim'
hook_add = '''
  vmap <Space>s <Plug>(operator-camelize-toggle)
'''

[[plugins]]
repo = 'scrooloose/nerdcommenter'
lua_add = '''
  vim.g.NERDSpaceDelims = 1
  vim.g.NERDDefaultAlign = 'left'
  vim.api.nvim_set_keymap('v', '<C-c>', '<Leader>c<Space>', {})
'''

# 表示系

[[plugins]]
repo = 'itchyny/lightline.vim'
# https://github.com/itchyny/lightline.vim/issues/293#issuecomment-373710096
hook_add = '''
  let g:lightline = {
        \ 'colorscheme': 'PaperColor',
        \ 'component_function': {
        \   'filename': 'LightlineFilename',
        \ }
        \ }
  function! LightlineFilename()
    let root = fnamemodify(get(b:, 'git_dir'), ':h')
    let path = expand('%:p')
    if path[:len(root)-1] ==# root
      return path[len(root)+1:]
    endif
    return expand('%')
  endfunction
'''

[[plugins]]
repo = 'simeji/winresizer'
hook_add = '''
  " ctrl+eでのリサイズのサイズ
  let g:winresizer_vert_resize = 5
'''

[[plugins]] # カーソル下の単語を移動するたびにハイライトする
repo = 'osyo-manga/vim-brightest'
hook_add = '''
  let g:brightest#highlight = { "group" : "BrightestUnderline" }
  let g:brightest#pattern = '\k\+'
'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
# これらを実行する
# :TSInstall ruby toml javascript typescript html css json yaml lua rust c cpp swift go haskell
# 確認
# :TSInstallInfo
hook_post_update = '''
  TSUpdate
'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter-context'
depends = ['nvim-treesitter']

[[plugins]] # 引数のハイライト
repo = 'm-demare/hlargs.nvim'
depends = ['nvim-treesitter']
lua_add = '''
  require('hlargs').setup {
    color = '#F0D0D0'
  }
'''

[[plugins]]
repo = 'lukas-reineke/indent-blankline.nvim'
depends = ['nvim-treesitter']
lua_add = '''
  vim.opt.termguicolors = true
  vim.cmd [[highlight IndentBlanklineIndent1 guibg=#1f1f1f gui=nocombine]]
  vim.cmd [[highlight IndentBlanklineIndent2 guibg=#1a1a1a gui=nocombine]]

  require("indent_blankline").setup {
    char = "|",
  }
'''

[[plugins]] # 閉じ括弧補間
repo = 'cohama/lexima.vim'

[[plugins]]
repo = 'ntpeters/vim-better-whitespace'
hook_add = '''
  let g:better_whitespace_guicolor = 'DarkRed'
'''
# 変な箇所で色がつくようなら以下を追加する
# autocmd FileType <desired_filetypes> EnableStripWhitespaceOnSave

# 検索・置換系

[[plugins]] # rubyやperl風正規表現(インクリメンタルサーチはできない)
repo = 'othree/eregex.vim'
# "/" will use :M/ to search. ",/" will use the original "/".
hook_add = '''
  let g:eregex_default_enable = 0
  nnoremap r/ :M/
'''

[[plugins]] # 検索結果数カウント
repo = 'henrik/vim-indexed-search'
hook_add = '''
  let g:indexed_search_dont_move = 1 " 検索時に1個下に動かないようになる
  let g:indexed_search_numbered_only = 1 " 検索カウントを簡素な表示に
  let g:indexed_search_shortmess = 1 " 検索カウントを簡素な表示に
'''

# mark系

[[plugins]]
repo = 'kshenoy/vim-signature'
lua_add = '''
  vim.g.SignatureMap = { ToggleMarkAtLine = "<Space>m", }
  vim.g.SignatureIncludeMarks = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  vim.api.nvim_set_keymap('n', '<Space>M', ':delmarks A-Z<CR>', { silent = true })
'''

[[plugins]] # コードに色付け(markとは別物) https://secret-garden.hatenablog.com/
repo = 't9md/vim-quickhl'
lua_add = '''
  local pattern = ([[
    binding.pry
    binding.irb
    NOTE:
    MEMO:
    <<<<<<<
    >>>>>>>
    =======
  ]]):gsub(" +", "")
     :gsub("\n", "\\|")
     :gsub("\\|$", "") -- 末尾についてしまう\|を削除
  vim.api.nvim_set_keymap('n', '<Space>h', '<Plug>(quickhl-manual-this)', { silent = true })
  vim.api.nvim_set_keymap('x', '<Space>h', '<Plug>(quickhl-manual-this)', { silent = true })
  vim.api.nvim_set_keymap('n', '<Space>H', '<Plug>(quickhl-manual-reset)', {silent = true })
  vim.g.quickhl_manual_enable_at_startup = 1
  vim.g.quickhl_manual_keywords = { { pattern = pattern, regexp = 1 }, }
'''

[[plugins]]
repo = 'RutaTang/quicknote.nvim'
depends = ['plenary.nvim']
lua_add = '''
  local quicknote = require("quicknote")
  quicknote.setup({})
  vim.cmd('autocmd BufEnter * lua require("quicknote").ShowNoteSigns()')

  function NewOrOpenNoteAtCurrentLine()
    if quicknote.OpenNoteAtCurrentLine() then
      print("note opened")
    else
      quicknote.NewNoteAtCurrentLine()
    end
  end
  vim.api.nvim_set_keymap("n", "<Space>n", "<cmd>:lua NewOrOpenNoteAtCurrentLine()<cr>",{})

  function DeleteNoteAtCurrentLineAndListNotesForCurrentBuffer()
    quicknote.DeleteNoteAtCurrentLine()
    quicknote.ListNotesForCurrentBuffer()
  end
  vim.api.nvim_set_keymap("n", "<Space>N", "<cmd>:lua DeleteNoteAtCurrentLineAndListNotesForCurrentBuffer()<cr>",{})
'''

# git系

[[plugins]] # gitコマンドをvimから使う
lazy = 1
on_cmd = ['Git', 'Ggrep', 'GBrowse']
repo = 'tpope/vim-fugitive'
hook_add = '''
  cabbrev g Ggrep
  cabbrev b GBrowse
  cabbrev l Git log --follow -p %
'''


[[plugins]] # vim-fugitiveのgithubサポート用
repo = 'tpope/vim-rhubarb'

[[plugins]] # gitのdiffを左端に表示
repo = 'airblade/vim-gitgutter'
hook_add = '''
  let g:gitgutter_git_executable = substitute(system('which git'), '\n\+$', '', '')
'''

[[plugins]] # gitのviewer. :Agit, :AgitFile
lazy = 1
on_cmd = ['Agit', 'AgitFile']
repo = 'cohama/agit.vim'
hook_add = '''
  nmap <Space>a :AgitFile<CR>
'''

# コンフリクトをハイライト
# [x や ]x でコンフリクト間を移動
[[plugins]]
repo = 'rhysd/conflict-marker.vim'
hook_add = '''
  let g:conflict_marker_enable_mappings = 0
'''

# 言語系

## Ruby

[[plugins]]
repo = 'tpope/vim-rails'
on_ft = 'ruby'

[[plugins]] # heredocのsytax-highlight
repo = 'joker1007/vim-ruby-heredoc-syntax'
on_ft = 'ruby'

[[plugins]]
repo = 'pocke/rbs.vim'
on_ft = 'ruby'

[[plugins]]
repo = 'mrkn/vim-cruby' # set ft=c, set ft=cruby
# hook_add = '''
#   autocmd BufWinEnter,BufNewFile *.c,*.h,insns.def setlocal filetype=cruby
# '''

## JavaScript

[[plugins]]
repo = 'maxmellon/vim-jsx-pretty'
hook_add = '''
  let g:vim_jsx_pretty_colorful_config = 1
  let g:vim_jsx_pretty_highlight_close_tag = 1
'''
on_ft = ['javascript', 'typescript', 'javascriptreact', 'typescriptreact']

## Crystal

[[plugins]]
repo = 'rhysd/vim-crystal'
on_ft = 'crystal'

## Slim

[[plugins]]
repo = 'slim-template/vim-slim'
on_ft = 'slim'

## Markdown

[[plugins]]
repo = 'plasticboy/vim-markdown'
hook_add = '''
  " markdwonの折りたたみ無効化
  set nofoldenable
  let g:vim_markdown_folding_disabled = 1
  " markdown書くようの設定
  autocmd FileType markdown inoremap <Tab> <Esc>>>A
  autocmd FileType markdown inoremap <S-Tab> <Esc><<A
  let g:vim_markdown_conceal = 0
'''
on_ft = 'markdown'

## HTML

[[plugins]] # htmlのショートカット
repo = 'mattn/emmet-vim'
on_ft = 'html'
# 詳しくは https://raw.githubusercontent.com/mattn/emmet-vim/master/TUTORIAL
# Ctrl m , で展開
hook_add = '''
  let g:user_emmet_leader_key='<C-Z>'
  " let g:user_emmet_install_global = 0
  " auletocmd FileType html,css,typescriptreact EmmetInstall
'''
# (例)
# html:5  : html5のテンプレート
# ul>li*3 : リスト3つ
# div{}   : divタグの中身に{}を入れる
# visualで囲った後に使うと、タグでそれを囲める

## TOML

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

## CSV
[[plugins]]
repo = 'mechatroner/rainbow_csv'
on_ft = 'csv'

## PlantUML
[[plugins]]
repo = 'aklt/plantuml-syntax'
on_ft = 'plantuml'

## logファイル
[[plugins]]
repo = 'mtdl9/vim-log-highlighting'


## Terraform
[[plugins]]
repo = 'hashivim/vim-terraform'

# その他
[[plugins]]
repo = 'rizzatti/dash.vim'
hook_add = '''
  cabbrev d Dash
'''
