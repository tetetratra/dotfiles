#! /usr/bin/env ruby

# [概要]
# 標準入力から受け取った文字列のファイル形式を推測して、それに応じてformatしたものを返すコマンド
#
# [準備]
# 以下のコマンドを実行して、必要なツールをインストールする
# ```
# pip3 install guesslang-experimental tensorflow==2.13.0
# npm install prettier
# npm install -g sql-formatter
# ```
#
# [備考]
# guesslang-experimental は、開発が止まった guesslang を誰かがforkして、新し目のtensorflowでも動くようにしたもの。
# ただし、最新のtensorflow(2.16)だと動かなかったので、入れられる中で一番古いバージョンであるtensorflow 2.13.0を入れる。

require 'open3'

class Guesser
  FailedToGuessError = Class.new(StandardError)

  def initialize(src)
    @src = src
  end

  def call
    Open3.popen3('guesslang') do |stdin, stdout, stderr, wait_thread|
      stdin.puts(@src)
      stdin.close

      err = stderr.read
      raise FailedToGuessError, err unless err.empty?

      guessed = stdout.read.match(/Programming language: (.*)\n/)[1]
      raise FailedToGuessError, 'no language guessed' if guessed.nil? || guessed.empty?
      raise FailedToGuessError, stderr.read unless wait_thread.value.success?

      guessed
    end
  end
end

class FormatterFactory
  class << self
    def build(lang)
      {
        'Ruby' => method(:format_ruby),
        'JavaScript' => method(:format_javascript)
      }[lang]
    end

    private

    def format_ruby(src)
      Open3.popen3('rubocop -A --stdin test.rb') do |stdin, stdout, stderr, wait_thread|
        stdin.puts(src)
        stdin.close
        stdout_result = stdout.read

        _, _, formatted = stdout_result.lines
                            .chunk { |line| line.match?(/\A=======+\n.*/) }
                            .map { |s| s.last.join }
        formatted
      end
    end

    def format_javascript(src)
      Open3.popen3('npx prettier --stdin-filepath test.js') do |stdin, stdout, stderr, wait_thread|
        stdin.puts(src)
        stdin.close

        stdout_result = stdout.read

        stdout_result
      end
    end
  end
end

def main
  src = STDIN.read

  guessed_lang = Guesser.new(src).call
  STDERR.puts "guessed: #{guessed_lang}"

  formatter = FormatterFactory.build(guessed_lang)
  if formatter.nil?
    STDERR.puts "No formatter found"
    return
  end

  formatted = formatter.call(src)
  puts formatted
end

main
